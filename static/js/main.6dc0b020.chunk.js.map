{"version":3,"sources":["components/TodoListTemplate.js","components/Form.js","components/TodoItem.js","components/TodoItemList.js","App.js","serviceWorker.js","index.js"],"names":["TodoListTemplate","form","children","className","Form","value","onChange","onCreate","onKeyPress","onClick","TodoItem","this","props","text","checked","id","onToggle","onRemove","e","stopPropagation","Component","TodoItemList","todos","todoList","map","key","App","state","input","handleChange","setState","target","handleCreate","concat","handleKeyPress","hanldeToggle","index","findIndex","todo","selected","nextTodos","handleToggle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6dc0b020.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoListTemplate.css';\r\n\r\nconst TodoListTemplate = ({form, children}) => {\r\n  return (\r\n    <main className=\"todo-list-template\">\r\n      <div className=\"title\">\r\n        오늘 할 일\r\n      </div>\r\n      <section className=\"form-wrapper\">\r\n        {form}\r\n      </section>\r\n      <section className=\"todos-wrapper\">\r\n        { children }\r\n      </section>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default TodoListTemplate;","import React from 'react';\r\nimport './Form.css';\r\n\r\nconst Form = ({value, onChange, onCreate, onKeyPress}) => {\r\n  return (\r\n    <div className=\"form\">\r\n      <input value={value} onChange={onChange} onKeyPress={onKeyPress}/>\r\n      <div className=\"create-button\" onClick={onCreate}>\r\n        추가\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\nimport './TodoItem.css';\r\n\r\nclass TodoItem extends Component {\r\n  render() {\r\n    const { text, checked, id, onToggle, onRemove } = this.props;\r\n\r\n    return (\r\n      <div className=\"todo-item\" onClick={() => onToggle(id)}>\r\n        <div className=\"remove\" onClick={(e) => {\r\n          e.stopPropagation(); // onToggle 이 실행되지 않도록 함\r\n          onRemove(id)}\r\n        }>&times;</div>\r\n        <div className={`todo-text ${checked && 'checked'}`}>\r\n          <div>{text}</div>\r\n        </div>\r\n        {\r\n          checked && (<div className=\"check-mark\">✓</div>)\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItem;","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nclass TodoItemList extends Component {\r\n  render() {\r\n    const { todos, onToggle, onRemove } = this.props;\r\n\r\n    const todoList = todos.map(\r\n      ({id, text, checked}) => (\r\n        <TodoItem\r\n          id={id}\r\n          text={text}\r\n          checked={checked}\r\n          onToggle={onToggle}\r\n          onRemove={onRemove}\r\n          key={id}\r\n        />\r\n      )\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        {todoList}    \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItemList;","import React, { Component } from 'react';\r\nimport TodoListTemplate from './components/TodoListTemplate';\r\nimport Form from './components/Form';\r\nimport TodoItemList from './components/TodoItemList';\r\n\r\n\r\nclass App extends Component {\r\n\r\n  id = 3\r\n\r\n  state = {\r\n    input:'',\r\n    todos: [\r\n      { id:0, text:'리액트 소개', checked:false}, \r\n      { id:1, text:'리액트 소개', checked:true}, \r\n      { id:2, text:'리액트 소개', checked:false}, \r\n    ]\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      input:e.target.value\r\n    });\r\n  }\r\n\r\n  handleCreate = () => {\r\n    const { input, todos } = this.state;\r\n    this.setState({\r\n      input : '',\r\n      todos : todos.concat({\r\n        id:this.id++,\r\n        text:input,\r\n        checked:false\r\n      })\r\n    })  \r\n  }\r\n\r\n  handleKeyPress = (e) => {\r\n    if(e.key === 'Enter') {\r\n      this.handleCreate();\r\n    }\r\n  }\r\n\r\n  hanldeToggle = (id) => {\r\n    const { todos } = this.state;\r\n    const index = todos.findIndex(todo => todo.id === id);\r\n    const selected = todos[index];\r\n\r\n    const nextTodos = [...todos];\r\n    \r\n      nextTodos[index] = { \r\n        ...selected, \r\n        checked: !selected.checked\r\n      };\r\n\r\n    this.setState({\r\n      todos: nextTodos\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {input, todos} = this.state;\r\n    const {\r\n      handleChange,\r\n      handleCreate,\r\n      handleKeyPress,\r\n      handleToggle\r\n    } = this;\r\n\r\n    return (\r\n      <TodoListTemplate form={(\r\n        <Form \r\n          value={input}\r\n          onKeyPress={handleKeyPress}\r\n          onChange={handleChange}\r\n          onCreate={handleCreate}\r\n        />\r\n      )}>\r\n        <TodoItemList todos={todos} onToggle={handleToggle}/>\r\n      </TodoListTemplate>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}